{"version":3,"sources":["Timer.jsx","CountdownContainer.jsx","Countdown.jsx","TabsComponent.jsx","serviceWorker.js","index.jsx"],"names":["Timer","props","run","msTime","state","setState","timeToClock","handleStart","buttonStatus","timerID","setInterval","clearInterval","handleDrop","sTime","mTime","hTime","this","className","onClick","React","PureComponent","CountdownContainer","seconds","minutes","handleSliderChange","max","min","defaultValue","onChange","e","tooltipVisible","Component","Countdown","TabsComponent","TabPane","Tabs","defaultActiveKey","tab","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a18f275.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nexport default class Timer extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      msTime: 0,\r\n      sTime: 0,\r\n      mTime: 0,\r\n      hTime: 0,\r\n      buttonStatus: 0,\r\n    };\r\n  }\r\n\r\n  run = () => {\r\n    const { msTime } = this.state;\r\n    this.setState({ msTime: msTime + 1 });\r\n    this.timeToClock();\r\n  }\r\n\r\n  handleStart = () => {\r\n    const { buttonStatus } = this.state;\r\n    buttonStatus === 1 ? this.setState({ buttonStatus: 0 }) : this.setState({ buttonStatus: 1 });\r\n    if (buttonStatus === 0) {\r\n      this.timerID = setInterval(() => this.run(), 10);\r\n    } else {\r\n      clearInterval(this.timerID);\r\n    }\r\n  }\r\n\r\n  handleDrop = () => {\r\n    clearInterval(this.timerID);\r\n    this.setState({ \r\n      msTime: 0,\r\n      sTime: 0,\r\n      mTime: 0,\r\n      hTime: 0,\r\n      buttonStatus: 0,\r\n    })\r\n  }\r\n\r\n  timeToClock = () => {\r\n    const { msTime, sTime, mTime, hTime } = this.state;\r\n    if (mTime === 60) {\r\n      this.setState({ mTime: 0, hTime: hTime + 1 });\r\n    }\r\n    if (sTime === 60) {\r\n      this.setState({ sTime: 0, mTime: mTime + 1 });\r\n    }\r\n    if (msTime === 100) {\r\n      this.setState({ msTime: 0, sTime: sTime + 1 });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { msTime, sTime, mTime, hTime, buttonStatus } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Button className=\"btn\" onClick={this.handleStart}>{buttonStatus === 1 ? 'Пауза' : 'Запустить'}</Button>\r\n        <Button className=\"btn\" onClick={this.handleDrop}>Сброс</Button>\r\n        <div className=\"clock\">\r\n          {hTime < 10 ? `0${hTime}` : `${hTime}`} :\r\n          {mTime < 10 ? ` 0${mTime}` : ` ${mTime}`} :\r\n          {sTime < 10 ? ` 0${sTime}` : ` ${sTime}`} :\r\n          {msTime < 10 ? ` 0${msTime}` : ` ${msTime}`}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Slider, Progress, Button } from 'antd';\r\n\r\nexport default class CountdownContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { seconds, minutes, handleSliderChange } = this.props;\r\n    return (\r\n      <div>\r\n        <Slider\r\n            max={60}\r\n            min={0}\r\n            defaultValue={minutes}\r\n            onChange={e => handleSliderChange(e)}\r\n            tooltipVisible\r\n        />\r\n        <Button className=\"btn\" onClick={this.handleDrop}>Старт</Button>\r\n        <div className=\"clock\">\r\n          {minutes < 10 ? ` 0${minutes}` : ` ${minutes}`} :\r\n          {seconds < 10 ? ` 0${seconds}` : ` ${seconds}`}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport CountdownContainer from './CountdownContainer'\r\n\r\nexport default class Countdown extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = ({\r\n      seconds: 0,\r\n      minutes: 0,\r\n    })\r\n  }\r\n\r\n  handleSliderChange = (e) => {\r\n    this.setState({ minutes: e, })\r\n  }\r\n\r\n  run = () => {\r\n    const { seconds } = this.state;\r\n    this.setState({ seconds: seconds - 1 });\r\n    this.timeToClock();\r\n  }\r\n\r\n  render() {\r\n    const { minutes, seconds } = this.state;\r\n    return (\r\n      <div>\r\n        <CountdownContainer \r\n          handleSliderChange={this.handleSliderChange} \r\n          minutes={minutes} \r\n          seconds={seconds}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}","/* eslint-disable react/prefer-stateless-function */\nimport React from 'react';\nimport './App.css';\nimport { Tabs } from 'antd';\nimport Timer from './Timer';\nimport Countdown from './Countdown';\n\nexport default class TabsComponent extends React.Component {\n  render() {\n    const { TabPane } = Tabs;\n    function switchTab() {\n      // console.log(key);\n    }\n\n    return (\n      <Tabs defaultActiveKey=\"1\" onChange={switchTab}>\n        <TabPane tab=\"Timer\" key=\"1\">\n          <Countdown />\n        </TabPane>\n        <TabPane tab=\"Countdown\" key=\"2\">\n          <Timer />\n        </TabPane>\n      </Tabs>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TabsComponent from './TabsComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TabsComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}